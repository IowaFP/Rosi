import Ro.Base

type Pair : * -> * -> *
type Pair = \ t u. Pi {'1 := t, '2 := u}

pair : forall t u. t -> u -> Pair t u
pair = \x y. (#'1 := x, #'2 := y)

type Triple : * -> * -> * -> *
type Triple = \ t u v. Pi {'1 := t, '2 := u, '3 := v}

triple : forall t u v. t -> u -> v -> Triple t u v
triple = \x y z. pair x y ++ (#'3 := z)

fst = \x. sel x #'1
snd = \x. sel x #'2
thd = \x. sel x #'3

nth : forall l a b y z z'.
        {l := a} + y ~ z, {l := b} + y ~ z' =>
        #l -> (a -> b) -> Pi z -> Pi z'
nth = \l f x. (l := f (sel x l)) ++ prj x

first = nth #'1
second = nth #'2
third = nth #'3

curry : forall a b c. (Pair a b -> c) -> a -> b -> c
curry = \f x y. f (pair x y)

uncurry : forall a b c. (a -> b -> c) -> Pair a b -> c
uncurry = \f p. f (fst p) (snd p)