-- should get around to import tracing...
type Unit : *
type Unit = Pi {}

unit : Unit
unit = prj (#'l := (/\a. \x : a. x))

case : forall l t u. #l -> (t -> u) -> (l := t) -> u
case = \ l f x. f (x / l)

type NatF : * -> *
type NatF = \n. Sigma { 'Zero := Unit, 'Succ := n}

type Nat : *
type Nat = Mu NatF

zero : Nat
zero = in (inj (#'Zero := unit))

succ : Nat -> Nat
succ = \n. in (inj (#'Succ := n))

one : Nat
one = succ zero

two : Nat
two = succ one

add : Nat -> Nat -> Nat
add = \m. fix (\add n. (case #'Zero (\u. m) ? case #'Succ (\nn. succ (add nn))) (out n))

three : Nat
three = add one two
