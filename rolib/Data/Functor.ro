import Ro.Base

type Iter : ((* -> *) -> *) -> ((* -> *) -> *) -> R[* -> *] -> *
type Iter = \f g z. forall l u. {l := u} < z => #l -> f u -> g u

type Mapper : (R[*] -> *) -> *
type Mapper = \k. forall z : R[* -> *], f g : (* -> *) -> *. Iter f g z -> k (f z) -> k (g z)

-- TURNS OUT that Pi and Sigma are syntax, not normal constructors. Fix me, eventually.

mapS : Mapper (\r. Sigma r)
mapS = /\ z f g. \ i v. ana [f] (\ l x. con l (i l x)) v

mapP : Mapper (\r. Pi r)
mapP = /\ z f g. \ i r. syn [g] (\l. i l (sel r l))

type Functor : (* -> *) -> *
type Functor = \f. forall a b. (a -> b) -> f a -> f b

fmapS : forall z : R[* -> *]. Pi (Functor z) -> Functor (Sigma z)
fmapS = \ d. /\ a b. \ f.
          mapS [\ X. X a] [\ X. X b] (\l. sel d l f)

fmapP : forall z : R[* -> *] . Pi (Functor z) -> Functor (Pi z)
fmapP = \ d. /\ a b. \ f.
          mapP [\ X. X a] [\ X. X b] (\l. sel d l f)

-- TODO: generalize, but this seems to require kind polymorphism???

--

type Applicative : (* -> *) -> *
type Applicative = \f. Pi { 'Functor := Functor f,
                            'pure := forall a. a -> f a,
                            'ap := forall a b. f (a -> b) -> f a -> f b }

applicativeFunctor : forall z : R[* -> *]. Pi (Applicative z) -> Pi (Functor z)
applicativeFunctor = mapP [Applicative] [Functor] (\l d. sel d #'Functor)

--

mapMaybe : Functor Maybe
mapMaybe = (\f. case #'Just (\x. Just (f x)) | case #'Nothing (const Nothing))

pureMaybe : forall a. a -> Maybe a
pureMaybe = con #'Just

apMaybe : forall a b. Maybe (a -> b) -> Maybe a -> Maybe b
apMaybe = case #'Just (\g x. mapMaybe g x)
        | otherwise (const Nothing)

applicativeMaybe : Applicative Maybe
applicativeMaybe = (#'Functor := mapMaybe) ++
                   (#'pure := pureMaybe) ++
                   (#'ap := apMaybe)

--

type Traversable : (* -> *) -> *
type Traversable = \t. Pi { 'Functor := Functor t,
                            'sequence := forall f a. Applicative f -> t (f a) -> f (t a) }

traversableFunctor : forall z : R[* -> *]. Pi (Traversable z) -> Pi (Functor z)
traversableFunctor = mapP [Traversable] [Functor] (\l d. sel d #'Functor)

sequenceS : forall z : R[* -> *]. Pi (Traversable z) -> (forall f a. Applicative f -> Sigma z (f a) -> f (Sigma z a))
sequenceS  = \d. /\ f a. \applf v. ana [\g. g (f a)] (\l x. sel applf #'Functor (con l) (sel (sel d l) #'sequence applf x)) v

traversableS : forall z : R[* -> *]. Pi (Traversable z) -> Traversable (Sigma z)
traversableS = \d. (#'Functor := fmapS (traversableFunctor d)) ++
                   (#'sequence := sequenceS d)

-- Doing this for Pi requires (at least) some kind of fold, so passing for now...
