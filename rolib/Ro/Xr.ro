import Ro.Base, Data.Functor

-- For the moment, just (attempting to) transcribe the algebras from the draft
-- paper.

-------------------------------------------------------------------------------
-- Shorthand

rcon : forall l f z. {l := f} < z => #l -> f (Mu (Sigma z)) -> Mu (Sigma z)
rcon = \l x. in (con l x)

-------------------------------------------------------------------------------
-- Catamorphisms

type FAlg : (* -> *) -> * -> *
type FAlg = \f a. f a -> a

cata : forall f a. Functor f -> FAlg f a -> Mu f -> a
cata = \ map a. fix (\ cata x. a (map cata (out x)))

rinj : forall f g : R[* -> *]. f < g => Pi (Functor f) -> Mu (Sigma f) -> Mu (Sigma g)
rinj = \d. cata (fmapS d) (o in inj)

-------------------------------------------------------------------------------
-- Bounded algebras

type Xh : R[* -> *] -> (R[* -> *] -> *) -> *
type Xh = \z f. forall w. z < w => Sigma z (Mu (Sigma w)) -> (Mu (Sigma w) -> f w) -> f w

histo : forall f r. (f (Mu f) -> (Mu f -> r) -> r) -> Mu f -> r
-- histo : forall f z. Xh z f -> Mu (Sigma z) -> f z
histo = \ a. fix (\ rec x. a (out x) rec)

brna : forall f x y z. x + y ~ z => Xh x f -> Xh y f -> Xh z f
brna = \ f g. f | g

brnal : forall f x z. x < z => Xh x f -> Xh z f -> Xh z f
brnal = \ f g. brnl f g