-------------------------------------------------------------------------------
-- Functions

o : forall t u v. (u -> v) -> (t -> u) -> t -> v
o = \ f g x. f (g x)

type Id : * -> *
type Id = \x. x

id : forall t. t -> t
id = \x. x

type Const : * -> * -> *
type Const = \x y. x

const : forall t u. t -> u -> t
const = \ x y. x

-------------------------------------------------------------------------------
-- Convenience functions for records and variants

sel : forall l : L, t : *, z : R[*]. {l := t} < z => Pi z -> #l -> t
sel = \ r l. prj r / l

con : forall l : L, t : *, z : R[*]. {l := t} < z => #l -> t -> Sigma z
con = \l x. inj (l := x)

case : forall l t u. #l -> (t -> u) -> (l := t) -> u
case = \ l f x. f (x / l)

brnl : forall x z t. x < z => (Sigma x -> t) -> (Sigma z -> t) -> Sigma z -> t
brnl = \ f g. f ? (o g (\x. inj x))

relabelS : forall l0 l1 t z y0 y1. {l0 := t} + z ~ y0, {l1 := t} + z ~ y1 =>
           #l0 -> #l1 -> Sigma y0 -> Sigma y1
relabelS = \ l0 l1. case l0 (con l1) ? (\x. inj x)

relabelInj : forall y1 y0 l0 l1 t x z.
             {l0 := t} + x ~ y0, {l1 := t} + x ~ y1, y1 < z =>
             #l0 -> #l1 -> Sigma y0 -> Sigma z
relabelInj = /\y1. \l0 l1 x. inj (relabelS l0 l1 x : Sigma y1)

relabelP : forall l0 l1 t z y0 y1. {l0 := t} + z ~ y0, {l1 := t} + z ~ y1 =>
           #l0 -> #l1 -> Pi y0 -> Pi y1
relabelP = \ l0 l1 r. (l1 := sel r l0) ++ prj r

-------------------------------------------------------------------------------
-- Base types

type Unit : *
type Unit = Pi {}

tt : Unit
tt = prj (#'x := (/\ a. \x. x))

type Bool : *
type Bool = Sigma { 'True := Unit, 'False := Unit }

True : Bool
True = con #'True tt

False : Bool
False = con #'False tt

not : Bool -> Bool
not = case #'True (con #'False)
    ? case #'False (con #'True)

-------------------------------------------------------------------------------
-- Basic analysis / synthesis

reflect : forall z : R[*], t. Pi (z -> t) -> Sigma z -> t
reflect = \ d w. ana (\ l u. sel d l u) w

reify : forall z t. (Sigma z -> t) -> Pi (z -> t)
reify = /\ z t. \f. syn [\X. X -> t] (\l x. f (con l x))

type Eq : * -> *
type Eq = \t. t -> t -> Bool

eqS : forall z : R[*]. Pi (Eq z) -> Eq (Sigma z)
eqS = \ d v. ana (\ l y. (case l (\x. sel d l x y) ? (\x. False)) v)

-- eqP requires `fold`, which I'm ignoring for the time being...

-------------------------------------------------------------------------------

eqBool : Eq Bool
eqBool = eqS (#'True := (\x y. True) ++ #'False := (\x y. True))